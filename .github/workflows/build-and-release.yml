name: .NET Desktop Build and Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]
  pull_request_target:
    types: [ master ]

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'
  PROJECT_NAME: 'FFXIManager'

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup signing key
        shell: pwsh
        run: |
          [System.IO.File]::WriteAllBytes("ffximanager.snk", [Convert]::FromBase64String("${{ secrets.SIGNING_KEY }}"))

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_NAME }}.csproj

      - name: Build application
        run: dotnet build ${{ env.PROJECT_NAME }}.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: Verify strong name signing
        shell: pwsh
        run: |
          $assemblyPath = "bin/${{ env.BUILD_CONFIGURATION }}/net9.0-windows/${{ env.PROJECT_NAME }}.dll"
          if (Test-Path $assemblyPath) {
            $assembly = [System.Reflection.Assembly]::LoadFile((Resolve-Path $assemblyPath).Path)
            $fullName = $assembly.FullName
            Write-Host "Assembly Full Name: $fullName"
            if ($fullName -match "PublicKeyToken=([a-f0-9]+)") {
              Write-Host "✅ Strong name signing verified - PublicKeyToken: $($matches[1])"
            } else {
              Write-Error "❌ Strong name signing failed - no PublicKeyToken found"
              exit 1
            }
          } else {
            Write-Error "❌ Assembly not found at expected path: $assemblyPath"
            exit 1
          }

      - name: Publish application
        run: dotnet publish ${{ env.PROJECT_NAME }}.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output publish

      - name: Create build info
        shell: pwsh
        run: |
          $buildInfo = @{
            BuildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            GitCommit = "${{ github.sha }}"
            GitRef = "${{ github.ref }}"
            BuildNumber = "${{ github.run_number }}"
            Configuration = "${{ env.BUILD_CONFIGURATION }}"
            TestsRun = $true
          } | ConvertTo-Json -Depth 2
          $buildInfo | Out-File -FilePath "publish/BuildInfo.json" -Encoding UTF8
          Write-Host "✅ Build info created"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-build
          path: publish/
          retention-days: 30

      - name: Clean up sensitive files
        if: always()
        shell: pwsh
        run: |
          $sensitiveFiles = @("ffximanager.snk")
          foreach ($file in $sensitiveFiles) {
            if (Test-Path $file) {
              Remove-Item $file -Force
              Write-Host "✅ Sensitive file cleaned up: $file"
            }
          }

  release_package:
    name: Create Windows Installer
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-build
          path: publish/

      - name: Create ZIP package
        shell: pwsh
        run: |
          $zipName = "${{ env.PROJECT_NAME }}-v${{ github.run_number }}-windows.zip"
          Compress-Archive -Path "publish/*" -DestinationPath $zipName -CompressionLevel Optimal
          Write-Host "✅ Created package: $zipName"
          Get-ChildItem -Path "publish" -Recurse | ForEach-Object {
            Write-Host "  $($_.Name)"
          }

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.PROJECT_NAME }}-v${{ github.run_number }}-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  codeql-analysis:
    name: Security Scan (CodeQL)
    runs-on: windows-latest
    needs: build
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  release-drafter:
    name: Draft Release Notes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
