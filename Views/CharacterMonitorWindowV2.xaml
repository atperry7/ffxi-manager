<Window x:Class="FFXIManager.Views.CharacterMonitorWindowV2"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:FFXIManager.ViewModels.CharacterMonitor"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance Type=vm:CharacterMonitorViewModel}"
        Title="FFXI Character Monitor"
        Height="{Binding WindowViewModel.Height, Mode=TwoWay}"
        Width="{Binding WindowViewModel.Width, Mode=TwoWay}"
        Left="{Binding WindowViewModel.Left, Mode=TwoWay}"
        Top="{Binding WindowViewModel.Top, Mode=TwoWay}"
        WindowState="{Binding WindowViewModel.WindowState, Mode=TwoWay}"
        Topmost="{Binding WindowViewModel.IsAlwaysOnTop}"
        WindowStartupLocation="CenterScreen"
        WindowStyle="None"
        AllowsTransparency="True"
        ResizeMode="CanResizeWithGrip"
        MinHeight="200" MinWidth="120"
        MaxHeight="800" MaxWidth="600"
        Background="Transparent">
    
    <Window.Resources>
        <!-- Converters -->
        <BooleanToVisibilityConverter x:Key="BoolToVis"/>
        
        <!-- Compact Button Style -->
        <Style x:Key="CompactButton" TargetType="Button" BasedOn="{StaticResource ModernButtonBase}">
            <Setter Property="Padding" Value="6,2"/>
            <Setter Property="FontSize" Value="9"/>
            <Setter Property="MinHeight" Value="20"/>
        </Style>
        
        <!-- Mini Button Style -->
        <Style x:Key="MiniButton" TargetType="Button" BasedOn="{StaticResource SecondaryIconButton}">
            <Setter Property="Padding" Value="2"/>
            <Setter Property="FontSize" Value="8"/>
            <Setter Property="MinWidth" Value="20"/>
            <Setter Property="MinHeight" Value="20"/>
        </Style>
        
        <!-- Character Card Template -->
        <DataTemplate x:Key="CharacterCardTemplate" DataType="{x:Type vm:CharacterItemViewModel}">
            <Border BorderBrush="{Binding BorderBrush}"
                    BorderThickness="{Binding BorderThickness}"
                    Background="{DynamicResource CardBackgroundBrush}"
                    CornerRadius="4"
                    Margin="2"
                    Padding="4">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <!-- Header: Hotkey + Name + Status -->
                    <Grid Grid.Row="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        
                        <!-- Hotkey Badge -->
                        <Border Grid.Column="0" 
                                Background="{DynamicResource PrimaryBrush}"
                                CornerRadius="2"
                                Margin="0,0,4,0"
                                Padding="4,2">
                            <TextBlock Text="{Binding HotkeyNumber}"
                                       FontWeight="Bold"
                                       FontSize="10"
                                       Foreground="White"
                                       ToolTip="{Binding HotkeyText}"/>
                        </Border>
                        
                        <!-- Character Name -->
                        <TextBlock Grid.Column="1"
                                   Text="{Binding DisplayName}"
                                   FontWeight="SemiBold"
                                   FontSize="11"
                                   TextTrimming="CharacterEllipsis"
                                   VerticalAlignment="Center"
                                   Foreground="{DynamicResource PrimaryTextBrush}"/>
                        
                        <!-- Status Indicator -->
                        <Ellipse Grid.Column="2"
                                 Width="8" Height="8"
                                 Fill="{Binding StatusBrush}"
                                 ToolTip="{Binding StatusText}"/>
                    </Grid>
                    
                    <!-- Status Text -->
                    <TextBlock Grid.Row="1"
                               Text="{Binding StatusText}"
                               FontSize="9"
                               Margin="0,2"
                               Foreground="{DynamicResource SecondaryTextBrush}"
                               TextTrimming="CharacterEllipsis"/>
                    
                    <!-- Action Buttons -->
                    <StackPanel Grid.Row="2" 
                                Orientation="Horizontal"
                                HorizontalAlignment="Center"
                                Margin="0,2,0,0">
                        
                        <!-- Activate Button (when click-to-switch is off) -->
                        <Button Content="Switch"
                                FontSize="9"
                                Padding="8,2"
                                Margin="0,0,2,0"
                                Command="{Binding ActivateCommand}"
                                Visibility="{Binding DataContext.WindowViewModel.ShowSwitchButtons, 
                                           RelativeSource={RelativeSource AncestorType=Window},
                                           Converter={StaticResource BoolToVis}}"
                                Style="{DynamicResource CompactButton}"/>
                        
                        <!-- Reorder Buttons -->
                        <Button Content="▲"
                                Width="20" Height="20"
                                FontSize="8"
                                Margin="0,0,2,0"
                                Command="{Binding DataContext.CollectionViewModel.MoveCharacterUpCommand,
                                        RelativeSource={RelativeSource AncestorType=Window}}"
                                CommandParameter="{Binding}"
                                IsEnabled="{Binding CanMoveUp}"
                                Style="{DynamicResource MiniButton}"
                                ToolTip="Move Up"/>
                        
                        <Button Content="▼"
                                Width="20" Height="20"
                                FontSize="8"
                                Command="{Binding DataContext.CollectionViewModel.MoveCharacterDownCommand,
                                        RelativeSource={RelativeSource AncestorType=Window}}"
                                CommandParameter="{Binding}"
                                IsEnabled="{Binding CanMoveDown}"
                                Style="{DynamicResource MiniButton}"
                                ToolTip="Move Down"/>
                    </StackPanel>
                </Grid>
                
                <!-- Click to Activate -->
                <Border.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding ActivateCommand}"/>
                </Border.InputBindings>
                
                <Border.Style>
                    <Style TargetType="Border">
                        <Style.Triggers>
                            <!-- Show hand cursor when click-to-switch is enabled -->
                            <DataTrigger Binding="{Binding DataContext.WindowViewModel.IsClickToSwitchEnabled,
                                                  RelativeSource={RelativeSource AncestorType=Window}}"
                                         Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                            </DataTrigger>
                            <!-- Hover effect -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Opacity" Value="0.9"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
        </DataTemplate>
        
        <!-- Responsive Panel Style -->
        <Style x:Key="ResponsivePanel" TargetType="ItemsControl">
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Vertical"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Switch to grid for many characters -->
                <DataTrigger Binding="{Binding Path=Items.Count, 
                                      RelativeSource={RelativeSource Self},
                                      Converter={x:Static vm:CharacterMonitorConverters.GreaterThan},
                                      ConverterParameter=4}"
                             Value="True">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <UniformGrid Columns="2"/>
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <!-- Horizontal for wide window -->
                <DataTrigger Binding="{Binding WindowViewModel.Width,
                                      Converter={x:Static vm:CharacterMonitorConverters.GreaterThan},
                                      ConverterParameter=350}"
                             Value="True">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    
    <!-- Main Window Content -->
    <Border Background="{DynamicResource BackgroundBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="1"
            CornerRadius="8"
            Opacity="{Binding WindowViewModel.WindowOpacity}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            <!-- Menu Bar -->
            <Menu Grid.Row="0"
                  Background="{DynamicResource HeaderBackgroundBrush}"
                  Foreground="{DynamicResource PrimaryTextBrush}"
                  FontSize="10">
                
                <!-- View Menu -->
                <MenuItem Header="_View">
                    <MenuItem Header="_Refresh"
                              Command="{Binding CollectionViewModel.RefreshCommand}"
                              InputGestureText="F5"/>
                    <Separator/>
                    <MenuItem Header="Window Size">
                        <MenuItem Header="_Tiny (120x200)"
                                  Command="{Binding WindowViewModel.SetTinySizeCommand}"/>
                        <MenuItem Header="_Small (160x300)"
                                  Command="{Binding WindowViewModel.SetSmallSizeCommand}"/>
                        <MenuItem Header="_Medium (200x400)"
                                  Command="{Binding WindowViewModel.SetMediumSizeCommand}"/>
                        <MenuItem Header="_Large (250x500)"
                                  Command="{Binding WindowViewModel.SetLargeSizeCommand}"/>
                        <MenuItem Header="_Wide (400x150)"
                                  Command="{Binding WindowViewModel.SetWideSizeCommand}"/>
                    </MenuItem>
                </MenuItem>
                
                <!-- Window Menu -->
                <MenuItem Header="_Window">
                    <MenuItem Header="_Always on Top"
                              IsCheckable="True"
                              IsChecked="{Binding WindowViewModel.IsAlwaysOnTop}"/>
                    <MenuItem Header="Auto-_hide when inactive"
                              IsCheckable="True"
                              IsChecked="{Binding WindowViewModel.IsAutoHideEnabled}"/>
                    <Separator/>
                    <MenuItem Header="Dock Position">
                        <MenuItem Header="Top _Left"
                                  Command="{Binding WindowViewModel.DockTopLeftCommand}"/>
                        <MenuItem Header="Top _Right"
                                  Command="{Binding WindowViewModel.DockTopRightCommand}"/>
                        <MenuItem Header="Bottom _Left"
                                  Command="{Binding WindowViewModel.DockBottomLeftCommand}"/>
                        <MenuItem Header="Bottom _Right"
                                  Command="{Binding WindowViewModel.DockBottomRightCommand}"/>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="_Minimize"
                              Command="{Binding WindowViewModel.MinimizeCommand}"/>
                    <MenuItem Header="_Close"
                              Command="{Binding WindowViewModel.CloseCommand}"/>
                </MenuItem>
                
                <!-- Options Menu -->
                <MenuItem Header="_Options">
                    <MenuItem Header="_Click-to-switch mode"
                              IsCheckable="True"
                              IsChecked="{Binding WindowViewModel.IsClickToSwitchEnabled}"
                              ToolTip="Click character cards to activate them"/>
                    <Separator/>
                    <MenuItem Header="_Transparency">
                        <StackPanel Margin="5">
                            <TextBlock Text="Window Opacity" Margin="0,0,0,5"/>
                            <Slider Minimum="0.3"
                                    Maximum="1.0"
                                    Value="{Binding WindowViewModel.WindowOpacity}"
                                    Width="150"
                                    TickFrequency="0.1"
                                    IsSnapToTickEnabled="True"/>
                            <TextBlock Text="{Binding WindowViewModel.WindowOpacity, 
                                            StringFormat='{}{0:P0}'}"
                                       HorizontalAlignment="Center"
                                       Margin="0,5,0,0"/>
                        </StackPanel>
                    </MenuItem>
                </MenuItem>
            </Menu>
            
            <!-- Title Bar -->
            <Border Grid.Row="1"
                    Background="{DynamicResource HeaderBackgroundBrush}"
                    Height="20"
                    MouseLeftButtonDown="TitleBar_MouseLeftButtonDown"
                    MouseRightButtonDown="TitleBar_MouseRightButtonDown">
                <Grid>
                    <TextBlock Text="FFXI Characters"
                               FontSize="10"
                               FontWeight="SemiBold"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Foreground="{DynamicResource PrimaryTextBrush}"/>
                    
                    <!-- Pin indicator when always on top -->
                    <TextBlock Text="📌"
                               FontSize="10"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Margin="5,0,0,0"
                               Foreground="{DynamicResource AccentBrush}"
                               Visibility="{Binding WindowViewModel.IsAlwaysOnTop,
                                          Converter={StaticResource BoolToVis}}"
                               ToolTip="Always on Top"/>
                </Grid>
            </Border>
            
            <!-- Character List -->
            <ScrollViewer Grid.Row="2"
                          VerticalScrollBarVisibility="Auto"
                          HorizontalScrollBarVisibility="Hidden">
                <ItemsControl ItemsSource="{Binding CollectionViewModel.Characters}"
                              ItemTemplate="{StaticResource CharacterCardTemplate}"
                              Style="{StaticResource ResponsivePanel}"
                              Margin="4"/>
            </ScrollViewer>
            
            <!-- Empty State -->
            <Border Grid.Row="2"
                    Background="{DynamicResource SurfaceBrush}"
                    Margin="10"
                    Padding="20"
                    CornerRadius="4"
                    Visibility="{Binding Path=CollectionViewModel.HasRunningCharacters,
                               Converter={x:Static vm:CharacterMonitorConverters.InverseBool},
                               FallbackValue=Collapsed}">
                <StackPanel HorizontalAlignment="Center"
                            VerticalAlignment="Center">
                    <TextBlock Text="🎮"
                               FontSize="32"
                               HorizontalAlignment="Center"
                               Opacity="0.5"/>
                    <TextBlock Text="No characters running"
                               FontSize="12"
                               FontWeight="Bold"
                               HorizontalAlignment="Center"
                               Margin="0,10,0,5"
                               Foreground="{DynamicResource PrimaryTextBrush}"/>
                    <TextBlock Text="Launch FFXI to see characters here"
                               FontSize="10"
                               HorizontalAlignment="Center"
                               Foreground="{DynamicResource SecondaryTextBrush}"/>
                </StackPanel>
            </Border>
            
            <!-- Status Bar -->
            <Border Grid.Row="3"
                    Background="{DynamicResource SurfaceBrush}"
                    Padding="5,2"
                    CornerRadius="0,0,8,8">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    
                    <!-- Character count -->
                    <TextBlock Grid.Column="0"
                               FontSize="9"
                               VerticalAlignment="Center"
                               Foreground="{DynamicResource SecondaryTextBrush}">
                        <TextBlock.Text>
                            <MultiBinding StringFormat="{}{0} character(s)">
                                <Binding Path="CharacterCount"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    
                    <!-- Performance indicator -->
                    <TextBlock Grid.Column="1"
                               Text="{Binding PerformanceStatus}"
                               FontSize="9"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Foreground="{DynamicResource SecondaryTextBrush}"/>
                    
                    <!-- Compact opacity slider -->
                    <StackPanel Grid.Column="2"
                                Orientation="Horizontal">
                        <TextBlock Text="Opacity:"
                                   FontSize="9"
                                   VerticalAlignment="Center"
                                   Margin="0,0,5,0"
                                   Foreground="{DynamicResource SecondaryTextBrush}"/>
                        <Slider Width="60"
                                Minimum="0.3"
                                Maximum="1.0"
                                Value="{Binding WindowViewModel.WindowOpacity}"
                                VerticalAlignment="Center"/>
                        <TextBlock Text="{Binding WindowViewModel.WindowOpacity,
                                        StringFormat='{}{0:P0}'}"
                                   FontSize="9"
                                   Width="30"
                                   TextAlignment="Right"
                                   VerticalAlignment="Center"
                                   Margin="5,0,0,0"
                                   Foreground="{DynamicResource SecondaryTextBrush}"/>
                    </StackPanel>
                </Grid>
            </Border>
        </Grid>
    </Border>
</Window>