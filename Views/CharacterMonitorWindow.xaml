<Window x:Class="FFXIManager.Views.CharacterMonitorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:FFXIManager.Views"
        Title="FFXI Characters" Height="500" Width="140"
        WindowStartupLocation="CenterScreen"
        WindowStyle="None"
        AllowsTransparency="True"
        ResizeMode="CanResizeWithGrip"
        MinHeight="200" MinWidth="120"
        MaxHeight="800" MaxWidth="600"
        Background="Transparent">
    
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
        
        <!-- **GAMING CONVERTERS** -->
        <local:CharacterIndexMultiConverter x:Key="CharacterIndexMultiConverter"/>
        <local:GreaterThanConverter x:Key="GreaterThanConverter"/>
        <local:InvertedBooleanToVisibilityConverter x:Key="InvertedBoolToVisConverter"/>
        <local:LessThanConverter x:Key="LessThanConverter"/>
        
        <!-- **GAMING-OPTIMIZED STYLES** -->
        <Style x:Key="CompactCharacterBorder" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource CardBackgroundBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="3"/>
            <Setter Property="Margin" Value="1"/>
            <Setter Property="Padding" Value="2"/>
            <Style.Triggers>
                <!-- Persistent green border for last activated character -->
                <DataTrigger Binding="{Binding IsLastActivated}" Value="True">
                    <Setter Property="Background" Value="{DynamicResource CardBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}"/>
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="Opacity" Value="1.0"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    
    <!-- Main border with background and opacity -->
    <Border x:Name="MainBorder" 
            Background="{DynamicResource BackgroundBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="1"
            CornerRadius="8">
        <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Full Menu Bar (shown when window is wide enough) -->
        <Menu Grid.Row="0" 
              x:Name="FullMenu"
              Background="{DynamicResource HeaderBackgroundBrush}"
              Foreground="{DynamicResource PrimaryTextBrush}"
              FontSize="10">
            <Menu.Style>
                <Style TargetType="Menu">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Style.Triggers>
                        <!-- Hide full menu when window is too narrow -->
                        <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource LessThanConverter}, ConverterParameter=200}" Value="True">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Menu.Style>
            
            <!-- View Menu -->
            <MenuItem Header="_View">
                <MenuItem Header="_Refresh Characters" Command="{Binding RefreshCharactersCommand}">
                    <MenuItem.Icon>
                        <TextBlock Text="🔄" FontSize="12"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Window Size">
                    <MenuItem Header="_Tiny (120x200)" Click="TinySize_Click"/>
                    <MenuItem Header="_Small (160x300)" Click="SmallSize_Click"/>
                    <MenuItem Header="_Medium (200x400)" Click="MediumSize_Click"/>
                    <MenuItem Header="_Large (250x500)" Click="LargeSize_Click"/>
                    <MenuItem Header="_Wide (400x150)" Click="WideSize_Click"/>
                </MenuItem>
            </MenuItem>
            
            <!-- Window Menu -->
            <MenuItem Header="_Window">
                <MenuItem x:Name="AlwaysOnTopMenuItem" Header="_Always on Top" 
                          IsCheckable="True" 
                          Checked="AlwaysOnTopToggle_Checked" 
                          Unchecked="AlwaysOnTopToggle_Unchecked">
                    <MenuItem.Icon>
                        <TextBlock Text="📌" FontSize="12"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="AutoHideMenuItem" Header="Auto-_hide when inactive" 
                          IsCheckable="True" 
                          IsChecked="False">
                    <MenuItem.Icon>
                        <TextBlock Text="👁" FontSize="12"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Dock Position">
                    <MenuItem Header="Top _Left" Click="DockTopLeft_Click"/>
                    <MenuItem Header="Top _Right" Click="DockTopRight_Click"/>
                    <MenuItem Header="Bottom _Left" Click="DockBottomLeft_Click"/>
                    <MenuItem Header="Bottom _Right" Click="DockBottomRight_Click"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Minimize" Click="MinimizeButton_Click">
                    <MenuItem.Icon>
                        <TextBlock Text="—" FontSize="12"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="_Close" Click="CloseButton_Click">
                    <MenuItem.Icon>
                        <TextBlock Text="✕" FontSize="12"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            
            <!-- Options Menu -->
            <MenuItem Header="_Options">
                <MenuItem x:Name="ClickToSwitchMenuItem" Header="_Click-to-switch mode" 
                          IsCheckable="True" 
                          IsChecked="True"
                          ToolTip="Click character cards to activate them"/>
                <Separator/>
                <MenuItem Header="_Transparency">
                    <StackPanel Margin="5">
                        <TextBlock Text="Window Opacity" Margin="0,0,0,5"/>
                        <Slider x:Name="MenuOpacitySlider"
                                Minimum="0.3" 
                                Maximum="1.0" 
                                Value="{Binding ElementName=MainBorder, Path=Opacity, Mode=TwoWay}"
                                Width="150"
                                TickFrequency="0.1"
                                IsSnapToTickEnabled="True"/>
                        <TextBlock Text="{Binding ElementName=MenuOpacitySlider, Path=Value, StringFormat='{}{0:P0}'}"
                                   HorizontalAlignment="Center"
                                   Margin="0,5,0,0"/>
                    </StackPanel>
                </MenuItem>
            </MenuItem>
        </Menu>
        
        <!-- Compact Menu (shown when window is narrow) -->
        <Menu Grid.Row="0" 
              x:Name="CompactMenu"
              Background="{DynamicResource HeaderBackgroundBrush}"
              Foreground="{DynamicResource PrimaryTextBrush}"
              FontSize="10">
            <Menu.Style>
                <Style TargetType="Menu">
                    <Setter Property="Visibility" Value="Collapsed"/>
                    <Style.Triggers>
                        <!-- Show compact menu when window is narrow -->
                        <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource LessThanConverter}, ConverterParameter=200}" Value="True">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Menu.Style>
            
            <!-- Single hamburger menu containing all options -->
            <MenuItem Header="☰" ToolTip="Menu">
                <!-- View submenu -->
                <MenuItem Header="View">
                    <MenuItem Header="Refresh Characters" Command="{Binding RefreshCharactersCommand}">
                        <MenuItem.Icon>
                            <TextBlock Text="🔄" FontSize="12"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="Window Size">
                        <MenuItem Header="Tiny (120x200)" Click="TinySize_Click"/>
                        <MenuItem Header="Small (160x300)" Click="SmallSize_Click"/>
                        <MenuItem Header="Medium (200x400)" Click="MediumSize_Click"/>
                        <MenuItem Header="Large (250x500)" Click="LargeSize_Click"/>
                        <MenuItem Header="Wide (400x150)" Click="WideSize_Click"/>
                    </MenuItem>
                </MenuItem>
                
                <Separator/>
                
                <!-- Window submenu -->
                <MenuItem Header="Window">
                    <MenuItem x:Name="CompactAlwaysOnTopMenuItem" Header="Always on Top" 
                              IsCheckable="True"
                              IsChecked="{Binding ElementName=AlwaysOnTopMenuItem, Path=IsChecked, Mode=TwoWay}"
                              Checked="AlwaysOnTopToggle_Checked" 
                              Unchecked="AlwaysOnTopToggle_Unchecked">
                        <MenuItem.Icon>
                            <TextBlock Text="📌" FontSize="12"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="CompactAutoHideMenuItem" Header="Auto-hide when inactive" 
                              IsCheckable="True" 
                              IsChecked="{Binding ElementName=AutoHideMenuItem, Path=IsChecked, Mode=TwoWay}">
                        <MenuItem.Icon>
                            <TextBlock Text="👁" FontSize="12"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="Dock Position">
                        <MenuItem Header="Top Left" Click="DockTopLeft_Click"/>
                        <MenuItem Header="Top Right" Click="DockTopRight_Click"/>
                        <MenuItem Header="Bottom Left" Click="DockBottomLeft_Click"/>
                        <MenuItem Header="Bottom Right" Click="DockBottomRight_Click"/>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="Minimize" Click="MinimizeButton_Click">
                        <MenuItem.Icon>
                            <TextBlock Text="—" FontSize="12"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Close" Click="CloseButton_Click">
                        <MenuItem.Icon>
                            <TextBlock Text="✕" FontSize="12"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                
                <Separator/>
                
                <!-- Options submenu -->
                <MenuItem Header="Options">
                    <MenuItem x:Name="CompactClickToSwitchMenuItem" Header="Click-to-switch mode" 
                              IsCheckable="True" 
                              IsChecked="{Binding ElementName=ClickToSwitchMenuItem, Path=IsChecked, Mode=TwoWay}"
                              ToolTip="Click character cards to activate them"/>
                    <Separator/>
                    <MenuItem Header="Transparency">
                        <StackPanel Margin="5">
                            <TextBlock Text="Window Opacity" Margin="0,0,0,5"/>
                            <Slider Minimum="0.3" 
                                    Maximum="1.0" 
                                    Value="{Binding ElementName=MainBorder, Path=Opacity, Mode=TwoWay}"
                                    Width="100"
                                    TickFrequency="0.1"
                                    IsSnapToTickEnabled="True"/>
                            <TextBlock Text="{Binding ElementName=MainBorder, Path=Opacity, StringFormat='{}{0:P0}'}"
                                       HorizontalAlignment="Center"
                                       Margin="0,5,0,0"/>
                        </StackPanel>
                    </MenuItem>
                </MenuItem>
            </MenuItem>
        </Menu>
        
        <!-- Ultra-Minimal Title Bar with Drag Support -->
        <Border Grid.Row="1" 
                Background="{DynamicResource HeaderBackgroundBrush}" 
                Height="16"
                MouseLeftButtonDown="TitleBar_MouseLeftButtonDown"
                MouseRightButtonDown="TitleBar_MouseRightButtonDown">
            <Grid>
                <!-- Simple centered title - completely clean -->
                <TextBlock Text="FFXI" 
                           FontSize="9" 
                           FontWeight="SemiBold"
                           HorizontalAlignment="Center" 
                           VerticalAlignment="Center"
                           Foreground="{DynamicResource PrimaryTextBrush}"
                           Opacity="0.8"/>
                
                <!-- Small visual indicator when always on top is active -->
                <TextBlock Text="📌" 
                           FontSize="8"
                           HorizontalAlignment="Left" 
                           VerticalAlignment="Center"
                           Margin="4,0,0,0"
                           Foreground="{DynamicResource AccentBrush}"
                           ToolTip="Always on Top is active">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=AlwaysOnTopMenuItem, Path=IsChecked}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Grid>
        </Border>
        
        <!-- **SMART RESPONSIVE CHARACTER LIST** -->
        <ScrollViewer Grid.Row="2" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
            <ItemsControl ItemsSource="{Binding Characters}" Margin="3" x:Name="CharacterList">
                <!-- **LAYOUT ADAPTATION**: Choose layout based on character count -->
                <ItemsControl.Style>
                    <Style TargetType="ItemsControl">
                        <!-- Default: Vertical Stack for 1-4 characters -->
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Vertical"/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <!-- **RESPONSIVE GRID**: Auto switch to 2-column grid for 5+ characters -->
                            <DataTrigger Binding="{Binding CharacterCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=4}" Value="True">
                                <Setter Property="ItemsPanel">
                                    <Setter.Value>
                                        <ItemsPanelTemplate>
                                            <UniformGrid Columns="2" HorizontalAlignment="Stretch"/>
                                        </ItemsPanelTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                            <!-- **WIDE MODE**: Horizontal layout when window is very wide -->
                            <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=350}" Value="True">
                                <Setter Property="ItemsPanel">
                                    <Setter.Value>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ItemsControl.Style>
                
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <!-- **GAMING-OPTIMIZED CHARACTER CARD** -->
                        <Border Style="{StaticResource CompactCharacterBorder}" 
                                MouseLeftButtonDown="CharacterCard_MouseLeftButtonDown"
                                Cursor="Hand">
                            
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                
                                <!-- **GAMING HEADER**: Hotkey + Status + Name -->
                                <Grid Grid.Row="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    
                                    <!-- **GAMING HOTKEY NUMBER** -->
                                    <Border Grid.Column="0" Background="{DynamicResource PrimaryBrush}" CornerRadius="2" Margin="0,0,3,0">
                                        <TextBlock FontWeight="Bold" FontSize="8" 
                                                   Foreground="White" Padding="2,1"
                                                   ToolTip="Hotkey slot number (Win+F1, Win+F2, etc.)">
                                            <TextBlock.Text>
                                                <MultiBinding Converter="{StaticResource CharacterIndexMultiConverter}">
                                                    <Binding />
                                                    <Binding Path="DataContext.Characters" RelativeSource="{RelativeSource AncestorType=Window}" />
                                                </MultiBinding>
                                            </TextBlock.Text>
                                        </TextBlock>
                                    </Border>
                                    
                                    <!-- Character Name -->
                                    <TextBlock Grid.Column="1" Text="{Binding DisplayName}" 
                                               FontWeight="Bold" FontSize="9" 
                                               TextTrimming="CharacterEllipsis"
                                               VerticalAlignment="Center"
                                               Foreground="{DynamicResource PrimaryTextBrush}"/>
                                    
                                    <!-- Process Status Indicator -->
                                    <Ellipse Grid.Column="2" Width="6" Height="6" 
                                             Fill="{Binding StatusBrush}" 
                                             VerticalAlignment="Center"
                                             ToolTip="Process status: Green = Running, Red = Stopped"/>
                                </Grid>
                                
                                <!-- **STATUS TEXT**: Last Activated info -->
                                <TextBlock Grid.Row="1" Text="{Binding StatusText}" 
                                           FontSize="7" Margin="0,1,0,2"
                                           Foreground="{DynamicResource SecondaryTextBrush}"
                                           TextTrimming="CharacterEllipsis"/>
                                
                                <!-- **COMPACT GAMING CONTROLS** -->
                                <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,2,0,0">
                                    <!-- Smart Switch Button (only visible when click-to-switch is disabled) -->
                                    <Button FontSize="8" Height="16" MinWidth="45"
                                            Command="{Binding DataContext.ActivateCharacterCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                            CommandParameter="{Binding}"
                                            Visibility="{Binding ElementName=ClickToSwitchMenuItem, Path=IsChecked, Converter={StaticResource InvertedBoolToVisConverter}}">
                                        <Button.Style>
                                            <Style TargetType="Button" BasedOn="{StaticResource ModernButtonBase}">
                                                <Setter Property="Content" Value="🎯"/>
                                                <Setter Property="Background" Value="{StaticResource SuccessBrush}"/>
                                                <Setter Property="Padding" Value="3,1"/>
                                                <Setter Property="ToolTip" Value="Switch to this character"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsLastActivated}" Value="True">
                                                        <Setter Property="Background" Value="{StaticResource SuccessBrush}"/>
                                                        <Setter Property="Content" Value="⚡"/>
                                                        <Setter Property="ToolTip" Value="Last activated character"/>
                                                        <Setter Property="Opacity" Value="1.0"/>
                                                    </DataTrigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="{StaticResource SuccessHoverBrush}"/>
                                                        <Setter Property="Opacity" Value="1.0"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                    
                                    <!-- Compact Reorder Controls -->
                                    <StackPanel Orientation="Horizontal" Margin="4,0,0,0">
                                        <Button Content="▲" Width="16" Height="16" FontSize="7"
                                                Style="{StaticResource SecondaryIconButton}"
                                                Command="{Binding DataContext.MoveCharacterUpCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                CommandParameter="{Binding}"
                                                ToolTip="Move up in order"/>
                                        <Button Content="▼" Width="16" Height="16" FontSize="7" Margin="2,0,0,0"
                                                Style="{StaticResource SecondaryIconButton}"
                                                Command="{Binding DataContext.MoveCharacterDownCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                CommandParameter="{Binding}"
                                                ToolTip="Move down in order"/>
                                    </StackPanel>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
        
        <!-- No Characters Message - Compact -->
        <Border Grid.Row="2" 
                Background="{DynamicResource SurfaceBrush}"
                Margin="5"
                Padding="10">
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="Visibility" Value="Collapsed"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CharacterCount}" Value="0">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock Text="🎮" FontSize="24" HorizontalAlignment="Center" Opacity="0.5"/>
                <TextBlock Text="No characters" 
                           FontSize="10" FontWeight="Bold" 
                           HorizontalAlignment="Center" Margin="0,5,0,2"
                           Foreground="{DynamicResource PrimaryTextBrush}"/>
                <TextBlock Text="Launch FFXI"
                           FontSize="9" Foreground="{DynamicResource SecondaryTextBrush}"
                           HorizontalAlignment="Center" 
                           TextWrapping="Wrap" 
                           TextAlignment="Center"/>
            </StackPanel>
        </Border>
        
        <!-- Status Bar with Opacity Slider -->
        <Border Grid.Row="3" 
                Background="{DynamicResource SurfaceBrush}" 
                Padding="3"
                CornerRadius="0,0,8,8"
                Height="20">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <!-- Status text -->
                <TextBlock Grid.Column="0" 
                           FontSize="8" 
                           VerticalAlignment="Center"
                           Margin="4,0,0,0"
                           Foreground="{DynamicResource SecondaryTextBrush}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Text" Value="{Binding CharacterCount, StringFormat='{}{0} chars'}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CharacterCount}" Value="0">
                                    <Setter Property="Text" Value="No characters"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding CharacterCount}" Value="1">
                                    <Setter Property="Text" Value="1 char"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                
                <!-- Center spacer -->
                <Border Grid.Column="1"/>
                
                <!-- Ultra-compact opacity control -->
                <StackPanel Grid.Column="2" Orientation="Horizontal" Margin="0,0,4,0">
                    <Slider x:Name="OpacitySlider"
                            Minimum="0.3" 
                            Maximum="1.0" 
                            Value="{Binding ElementName=MainBorder, Path=Opacity, Mode=TwoWay}"
                            VerticalAlignment="Center"
                            Width="40"
                            Height="10"
                            ToolTip="Transparency"/>
                    
                    <TextBlock Text="{Binding ElementName=OpacitySlider, Path=Value, StringFormat='{}{0:P0}'}"
                               FontSize="7" 
                               Width="22"
                               TextAlignment="Right"
                               VerticalAlignment="Center"
                               Margin="2,0,0,0"
                               Foreground="{DynamicResource SecondaryTextBrush}"/>
                </StackPanel>
            </Grid>
        </Border>
        </Grid>
    </Border>
</Window>
